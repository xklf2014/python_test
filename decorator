import functools
import time
import datetime
#编写一个decorator，能在函数调用的前后打印出'begin call'和'end call'的日志

def now():
     print('2015-3-25')

f = now
#f()
#print(now.__name__)
#print(f.__name__)

def log(func):
    def wrapper(*args, **kw):
        print('call %s():' % func.__name__)
        return func(*args, **kw)
    return wrapper

@log
def now():
    print('2015-3-25')
    
#now()




def log(func):
    @functools.wraps(func)
    def wrapper(*args, **kw):
        print('call %s():' % func.__name__)
        return func(*args, **kw)
    return wrapper
    
@log
def now1():
    print('2015-3-26')    

def log(text):
    def decorator(func):
        @functools.wraps(func)
        def wrapper(*args, **kw):
            print('%s %s():' % (text, func.__name__))
            return func(*args, **kw)
        return wrapper
    return decorator

@log('excute')
def now2():
    print('2015-3-27')   
#print(now2.__name__)
#now1()
#now2()

 

def metric(fn):
    @functools.wraps(fn)
    def wrapper(*args, **kw):
        t1=time.time()
        r=fn(*args, **kw)
        print('%s excute in %s ms' %(fn.__name__, 1000*(time.time()-t1)))
        return r
    return wrapper

@metric
def fast(x, y):
    time.sleep(0.0012)
    return x + y;

@metric
def slow(x, y, z):
    time.sleep(0.1234)
    return x * y * z;

f = fast(11, 22)
s = slow(11, 22, 33)
if f != 33:
    print('测试失败!')
elif s != 7986:
    print('测试失败!')
    
    
def logger(fn):
    @functools.wraps(fn)
    def wrapper(*args, **kw):
        print('begin call')
        r=fn(*args, **kw)
        print('call function name is 【' + fn.__name__+'】')
        print('end call')
        return r
    return wrapper
    
def logger(text):
    def decorator(fn):
        @functools.wraps(fn)
        def wrapper(*args, **kw):
            print('begin call')
            r=fn(*args, **kw)
            print('%s %s()' % (text, fn.__name__))
            print('end call')
            return r
        return wrapper
    return decorator
    
@logger('call')  
def sums():
    return 1+1
    
print(sums())
    
